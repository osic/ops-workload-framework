heat_template_version: 2015-04-30
description: Network intensive resource.

parameters:
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  key_name:
    type: string
    description: Key pair used to ssh into instance.
  image:
    type: string
    label: Image ID
    description: Image to be used for compute instance
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    constraints:
      - custom_constraint: nova.flavor
  network:
    type: string
    label: Network ID/Name
    description: Network to be used for compute instance.
  size:
    type: number
    description: Size of the volume to be created.
    default: 1
    constraints:
      - range: { min: 1 }
  influx_ip:
    type: string
    description: Ip address of the database of monitoring stack
resources:
  security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        name: web_server_security_group
        rules:
          - protocol: tcp
            port_range_min: 1234
            port_range_max: 1234
          - protocol: tcp
            port_range_min: 1235
            port_range_max: 1235
          - protocol: tcp
            port_range_min: 22
            port_range_max: 22
  port_server:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - { get_resource: security_group }
  name_nonce:
    type: OS::Heat::RandomString
    properties:
            length: 7
            sequence: lowercase
  nova_server:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: network-server-$NONCE
          params:
            $NONCE: { get_resource: name_nonce}
      availability_zone: { get_param: availability_zone }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks: 
        - port: { get_resource: port_server }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __influx_ip__: { get_param: influx_ip }
          template: |
            #!/bin/sh
            sudo sed -i '1s/^/nameserver 8.8.8.8 /' /etc/resolv.conf
            sudo apt-get -y update
            sudo apt-get -y install git
            wget https://dl.influxdata.com/telegraf/releases/telegraf_1.0.1_amd64.deb
            sudo dpkg -i telegraf_1.0.1_amd64.deb
            sudo apt-get install -f
            telegraf config > /etc/telegraf/telegraf.conf
            sed -i -e "s/localhost/__influx_ip__/g" /etc/telegraf/telegraf.conf
            sed -i '$ a\'"[[inputs.net]]" /etc/telegraf/telegraf.conf
            service telegraf restart
            sudo dd if=/dev/urandom of=random_small.img count=10 bs=10M
            sudo dd if=/dev/urandom of=random_large.img count=100 bs=10M
            python -m SimpleHTTPServer 1234
  port_client:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - { get_resource: security_group }
  nova_client:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: network-client-$NONCE
          params:
            $NONCE: { get_resource: name_nonce}
      availability_zone: { get_param: availability_zone }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks: 
        - port: { get_resource: port_client }
      user_data_format: RAW
      user_data: 
        str_replace:
          params:
            __influx_ip__: { get_param: influx_ip }
            __server_ip__: { get_attr: [nova_server,first_address]  }
          template: |
            #!/bin/sh
            sudo sed -i '1s/^/nameserver 8.8.8.8 /' /etc/resolv.conf
            sudo apt-get -y update
            sudo apt-get -y install git
            wget https://dl.influxdata.com/telegraf/releases/telegraf_1.0.1_amd64.deb
            sudo dpkg -i telegraf_1.0.1_amd64.deb
            sudo apt-get install -f
            telegraf config > /etc/telegraf/telegraf.conf
            sed -i -e "s/localhost/__influx_ip__/g" /etc/telegraf/telegraf.conf
            sed -i '$ a\'"[[inputs.net]]" /etc/telegraf/telegraf.conf
            service telegraf restart
            echo '__server_ip__' > /root/ip
            while true; do
                echo "Script started"
                sudo wget '__server_ip__':1234/random_small.img -o /root/random_small.img
                sudo wget '__server_ip__':1234/random_large.img -o /root/random_large.img
                sudo rm /root/random_small.img
                sudo rm /root/random_large.img
            done
         
